!=======================================================================
! A Neural Network Emulator of the Level-ice meltpond parametrisation
!
! This subroutine is an emulator of the Level-ice melt pond parametrisation
! The parametrisation which it emulates is described as:
!
! ----
!
! This meltpond parameterization was developed for use with the delta-
! Eddington radiation scheme, and only affects the radiation budget in
! the model.  That is, although the pond volume is tracked, that liquid
! water is not used elsewhere in the model for mass budgets or other
! physical processes.
!
! The input is the same as the original Level-ice parametrisation.
! The code builds on the work of the same module in the official Icepack 
! model, differing in how the variables modified by this parametrisation 
! (apnd, hpnd, ipnd, ffrac) are calculated.
!
! ----
!  For subroutines compute_ponds_lvl and selu:
!
! author: Simon Driscoll (University of Reading)
! contact: s.driscoll@pgr.reading.ac.uk
!
!=======================================================================

      module icepack_meltpond_lvl

      use icepack_kinds
      use icepack_parameters, only: c0, c1, c2, c10, p01, p5, puny
      use icepack_parameters, only: viscosity_dyn, rhoi, rhos, rhow, Timelt, Tffresh, Lfresh
      use icepack_parameters, only: gravit, depressT, rhofresh, kice, pndaspect, use_smliq_pnd
      use icepack_warnings, only: warnstr, icepack_warnings_add
      use icepack_warnings, only: icepack_warnings_setabort, icepack_warnings_aborted

      implicit none

      private
      public :: compute_ponds_lvl

!=======================================================================

      contains

!=======================================================================

      subroutine compute_ponds_lvl(dt,     nilyr,        &
                                   ktherm,               &
                                   hi_min, dpscale,      &
                                   frzpnd,               &
                                   rfrac,  meltt, melts, &
                                   frain,  Tair,  fsurfn,&
                                   dhs,    ffrac,        &
                                   aicen,  vicen, vsnon, &
                                   qicen,  sicen,        &
                                   Tsfcn,  alvl,         &
                                   apnd,   hpnd,  ipnd,  &
                                   meltsliqn)

      integer (kind=int_kind), intent(in) :: &
         nilyr, &    ! number of ice layers
         ktherm      ! type of thermodynamics (0 0-layer, 1 BL99, 2 mushy)

      real (kind=dbl_kind), intent(in) :: &
         dt,       & ! time step (s)  
         hi_min,   & ! minimum ice thickness allowed for thermo (m)
         dpscale     ! alter e-folding time scale for flushing

      character (len=char_len), intent(in) :: &
         frzpnd      ! pond refreezing parameterization

      real (kind=dbl_kind), &
         intent(in) :: &
         Tsfcn, &    ! surface temperature (C)
         alvl,  &    ! fraction of level ice
         rfrac, &    ! water fraction retained for melt ponds
         meltt, &    ! top melt rate (m/s)
         melts, &    ! snow melt rate (m/s)
         frain, &    ! rainfall rate (kg/m2/s)
         Tair,  &    ! air temperature (K)
         fsurfn,&    ! atm-ice surface heat flux  (W/m2)
         aicen, &    ! ice area fraction
         vicen, &    ! ice volume (m)
         vsnon, &    ! snow volume (m)
         meltsliqn   ! liquid contribution to meltponds in dt (kg/m^2)

      real (kind=dbl_kind), &
         intent(inout) :: &
         apnd, hpnd, ipnd

      real (kind=dbl_kind), dimension (:), intent(in) :: &
         qicen, &  ! ice layer enthalpy (J m-3)
         sicen     ! salinity (ppt)   

      real (kind=dbl_kind), &
         intent(in) :: &
         dhs       ! depth difference for snow on sea ice and pond ice

      real (kind=dbl_kind), &
         intent(out) :: &
         ffrac     ! fraction of fsurfn over pond used to melt ipond

      ! local temporary variables
      real (kind=dbl_kind), dimension (18) :: &
         x_t, &    ! x_t 
         layer_1   ! layer_1
      real (kind=dbl_kind), dimension (4) :: layer_2   ! layer_2

      REAL(KIND=dbl_kind) :: fortran_layer_1_consts(18), &
       fortran_layer_2_consts(18),&
fortran_layer_3_consts(18), &
       fortran_layer_4_consts(18),&
fortran_layer_5_consts(18), &
       fortran_layer_6_consts(4),&
 fortran_scaler_const(18,2)

      REAL (kind=dbl_kind) :: fortran_layer_1_weights_1(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_2(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_3(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_4(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_5(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_6(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_7(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_8(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_9(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_10(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_11(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_12(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_13(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_14(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_15(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_16(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_17(18)
      REAL (kind=dbl_kind) :: fortran_layer_1_weights_18(18)

      REAL (kind=dbl_kind) :: fortran_layer_2_weights_1(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_2(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_3(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_4(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_5(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_6(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_7(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_8(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_9(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_10(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_11(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_12(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_13(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_14(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_15(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_16(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_17(18)
      REAL (kind=dbl_kind) :: fortran_layer_2_weights_18(18)

      REAL (kind=dbl_kind) :: fortran_layer_3_weights_1(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_2(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_3(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_4(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_5(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_6(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_7(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_8(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_9(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_10(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_11(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_12(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_13(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_14(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_15(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_16(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_17(18)
      REAL (kind=dbl_kind) :: fortran_layer_3_weights_18(18)

      REAL (kind=dbl_kind) :: fortran_layer_4_weights_1(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_2(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_3(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_4(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_5(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_6(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_7(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_8(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_9(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_10(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_11(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_12(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_13(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_14(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_15(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_16(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_17(18)
      REAL (kind=dbl_kind) :: fortran_layer_4_weights_18(18)

      REAL (kind=dbl_kind) :: fortran_layer_5_weights_1(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_2(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_3(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_4(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_5(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_6(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_7(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_8(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_9(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_10(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_11(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_12(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_13(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_14(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_15(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_16(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_17(18)
      REAL (kind=dbl_kind) :: fortran_layer_5_weights_18(18)

      REAL (kind=dbl_kind) :: fortran_layer_6_weights_1(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_2(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_3(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_4(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_5(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_6(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_7(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_8(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_9(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_10(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_11(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_12(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_13(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_14(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_15(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_16(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_17(4)
      REAL (kind=dbl_kind) :: fortran_layer_6_weights_18(4)

      INTEGER :: i, j, i_loop, j_loop
      REAL (kind=dbl_kind) :: selu_x, selu_x_dummy, x, tempmyreal
      REAL (kind=dbl_kind) :: fortran_scaler_stds(18)
      REAL (kind=dbl_kind) :: fortran_scaler_means(18)
      REAL (kind=dbl_kind) :: y_fortran_scaler_means(4)
      REAL (kind=dbl_kind) :: y_fortran_scaler_stds(4)
      !--
      !For every variable in we output its value at the start of the lvl melt pond parametrisation
      !--
      Print *, "++++++++++++++++++++"
      Print *, "Inside compute_ponds_lvl SubRoutine (1)."
      Print *, "++++++++++++++++++++"
      Print *, "nilyr, is:                    ", nilyr
      Print *, "ktherm, is:                   ", ktherm
      Print *, "dt, is:                       ", dt
      Print *, "hi_min, is:                   ", hi_min
      Print *, "dpscale, is:                  ", dpscale
      Print *, "frzpnd, is:                   ", frzpnd
      Print *, "Tsfcn, is:                    ", Tsfcn
      Print *, "alvl, is:                     ", alvl
      Print *, "rfrac, is:                    ", rfrac
      Print *, "meltt, is:                    ", meltt
      Print *, "melts, is:                    ", melts
      Print *, "frain, is:                    ", frain
      Print *, "Tair, is:                     ", Tair
      Print *, "fsurfn, is:                   ", fsurfn
      Print *, "aicen, is:                    ", aicen
      Print *, "vicen, is:                    ", vicen
      Print *, "vsnon, is:                    ", vsnon
      Print *, "meltsliqn, is:                ", meltsliqn
      Print *, "qicen, is:                    ", qicen
      Print *, "sicen, is:                    ", sicen
      Print *, "dhs, is:                      ", dhs
      Print *, "apnd (in), is:                ", apnd
      Print *, "hpnd (in), is:                ", hpnd
      Print *, "ipnd (in), is:                ", ipnd
      Print *, "ffrac (in), is:               ", ffrac
      Print *, "++++++++++++++++++++"
      Print *, "Inside compute_ponds_lvl SubRoutine (2)."
      Print *, "++++++++++++++++++++"

      !--
      !End of Outputting Values at the Start of the Melt Pond Parametrization
      !--
 
!      fortran_scaler_means=(/3600.,7.,0.01,0.2646114,&
!      9.71423986e-05,1.76247313e-05,6.66644749e-06,&
!      265.00853045,-2.07534244,-0.00170162,0.13483694,&
!      0.15309884,0.01481411,-4.9671632,0.30401578,&
!      0.04058217,0.00421382,0.00105196/)
!
!      fortran_scaler_stds=(/0.,0.,0.,0.23762826,&
!      0.00087106,0.00017715,3.1527981e-05,10.90969017,&
!      31.44275292,0.02271638,0.27956266,0.33244626,&
!      0.03937458,7.3650694,0.45935757,0.16684022,&
!      0.0177957,0.0062573/)

      fortran_scaler_means=(/3600.0, 7.0, 0.00999999999999987, 0.2646113956594903,&
9.714239864602315e-05, 1.762473127220455e-05,&
6.666447488584481e-06,&
265.00853044520557,&
-2.0753424353632535,&
-0.0017016244352081136,&
0.13483693606998826,&
0.15309884061482493,&
0.014814112832953533,&
-4.967163197005169,&
0.3040157849498504,&
0.040582169756724226,&
0.004213819393047367,&
0.0010519599091466264/)

fortran_scaler_stds=(/0.0,&
0.0,&
0.0,&
0.23762826100983728,&
0.0008710638655181999,&
0.0001771479373808342,&
3.152798099030236e-05,&
10.909690167632933,&
31.442752918818037,&
0.022716383865801285,&
0.2795626600115734,&
0.3324462560099669,&
0.03937457942062025,&
7.365069400018307,&
0.4593575671298159,&
0.1668402222713476,&
0.017795698641136903,&
0.006257295176157965/)
     
y_fortran_scaler_means=(/0.040593142607650026,&
0.004266672560698676,&
0.0009741549212324771,&
0.0029534839555229136/)

y_fortran_scaler_stds=(/0.16688955556357518,&
0.01791779601435871,&
0.0058788796742160815,&
0.0542442817958668/)

fortran_layer_1_weights_1 = (/-6.33078814e-02,  2.38667369e-01, -3.29781741e-01, -3.25609207e-01,&
   3.10102880e-01, -1.30705625e-01, -3.38754475e-01,  5.64537942e-02,&
  -3.78835827e-01, -3.22514683e-01,  1.25547767e-01, -3.58509868e-01,&
  -1.96394861e-01, -3.69834661e-01, -3.26900750e-01, -1.31799877e-02,&
  -4.29357588e-02, -1.47220463e-01/)

fortran_layer_1_weights_2 =  (/-6.54441714e-02, -9.17693079e-02, -1.55496299e-01, -1.18360758e-01,&
   3.69876206e-01,  1.84839666e-01, -1.03012830e-01, -3.81053299e-01,&
   3.41987014e-01, -2.18575001e-02, -2.40642786e-01,  3.58722508e-02,&
   1.03567123e-01, -2.98029244e-01,  3.50057781e-01,  2.38625824e-01,&
  -3.87818962e-01,  2.26961315e-01/)

fortran_layer_1_weights_3 =  (/ 3.22626829e-01,  2.01220274e-01,  2.75843263e-01, -9.82937217e-03,&
   7.67576694e-03,  3.32038403e-01,  2.05377638e-02,  5.10371625e-02,&
  -3.19355309e-01,  1.71086252e-01, -1.68729618e-01, -2.13077024e-01,&
   2.16431260e-01,  3.76151383e-01, -1.30164742e-01, -3.46915036e-01,&
  -3.70925695e-01,  3.62075090e-01/)

fortran_layer_1_weights_4 =  (/-7.16060638e-01,  1.15629876e+00,  2.06772625e-01,  2.11259580e+00,&
  -1.29610091e-01, -6.88816011e-01, -3.58466595e-01, -8.54772329e-02,&
   1.23389995e+00, -2.49044746e-01, -1.38540184e+00,  2.04227194e-01,&
   2.50244856e-01,  1.99902248e+00,  1.18697596e+00, -3.72015685e-02,&
  -6.69270381e-02, -1.56830072e-01/)

fortran_layer_1_weights_5 =  (/-2.91331506e+00, -1.16735334e+01, -8.07639217e+00, -5.90817392e-01,&
   2.86569238e+00, -1.42619371e+00,  9.20790970e-01,  3.03590801e-02,&
   1.21665490e+00, -5.67713333e-03, -2.99911022e+00, -2.97352791e-01,&
   7.92695856e+00,  3.26933098e+00,  2.64981031e-01,  1.02313077e+00,&
  -4.43492495e-02, -1.86271095e+01/)

fortran_layer_1_weights_6 = (/-2.85439229e+00, -1.97625458e+00, -1.03611805e-01, -1.53266817e-01,&
   8.59131962e-02,  1.97490752e+00, -2.45116830e-01, -2.38885321e-02,&
  -4.71548378e-01,  1.08752921e-01,  3.67838770e-01, -1.08084946e+01,&
  -8.94644141e-01,  6.77966774e-01,  1.61674154e+00, -1.63058862e-01,&
   2.67070848e-02,  1.38613725e+00/)

fortran_layer_1_weights_7 = (/ 1.28253641e+01, -2.73211336e+00, -7.87842607e+00,  1.28067541e+00,&
   1.41979380e+01,  2.94369251e-01,  9.39530373e+00,  1.74541339e-01,&
   4.61798954e+00, -1.03515482e+00,  2.52839065e+00, -6.32806683e+00,&
  -4.84366007e-02,  1.67285967e+00,  3.94745231e+00, -8.80620599e-01,&
   1.56325296e-01,  1.06443679e+00/)

fortran_layer_1_weights_8 = (/-3.98426116e-01, -7.44963884e-01, -6.52177143e+00,  2.35560703e+00,&
  -1.65108359e+00, -5.34457541e+00,  1.28173912e+00,  7.83814266e-02,&
  -4.87206650e+00, -2.06779271e-01,  4.97436237e+00, -8.86442721e-01,&
   2.71766400e+00,  3.26729149e-01,  5.84763145e+00, -2.50693393e+00,&
   6.88512698e-02,  1.55447328e+00/)

fortran_layer_1_weights_9 = (/ 5.19036412e-01,  3.79139733e+00, -7.87328124e-01, -4.11421156e+00,&
  -1.21998537e+00, -2.46649414e-01,  1.54114589e-01,  4.91021527e-03,&
  -5.48966765e-01, -1.80441871e-01, -1.74796477e-01, -9.11717176e-01,&
  -4.22948599e+00, -3.30009437e+00,  5.95062971e-01, -1.06225729e+00,&
   5.70420250e-02, -1.15637951e+01/)

fortran_layer_1_weights_10 = (/ 7.97005844e+00, -1.87944975e-02, -1.46796674e-01, -4.77475494e-01,&
   1.13283825e+01,  1.33415842e+00,  3.20540285e+00, -4.38903794e-02,&
  -3.42308521e+00, -2.53830701e-01, -3.53603303e-01, -1.52393043e-01,&
  -1.54469557e+01, -2.64004339e-02, -2.79187155e+00,  5.35726595e+00,&
   7.85910059e-03,  2.35828504e-01/)

fortran_layer_1_weights_11 = (/-5.98468304e-01,  1.53019226e+00, -5.05417526e-01,  2.15438533e+00,&
   2.19265491e-01, -4.90502417e-01, -6.94615960e-01,  1.67337030e-01,&
   1.14575422e+00,  2.62464166e-01, -1.55053270e+00,  1.41138420e-01,&
   2.08085418e-01,  1.44732141e+00,  1.33770967e+00,  5.41951299e-01,&
   1.22911029e-01, -4.08821493e-01/)

fortran_layer_1_weights_12 = (/ 3.54323357e-01,  4.53286022e-01,  6.70618415e-01,  1.11809754e+00,&
  -2.11312830e-01, -5.51305342e+00,  1.74488544e+00, -9.43325646e-03,&
  -6.11775517e-01,  3.23518246e-01, -1.23910177e+00, -6.29296482e-01,&
   3.61626506e-01, -3.50045681e+00, -1.88829982e+00,  2.07438374e+00,&
  -6.09937590e-03,  7.21724451e-01/)

fortran_layer_1_weights_13 =  (/-4.42228317e+00, -1.39483619e+00,  5.27013016e+00, -6.14025450e+00,&
  -7.28156185e+00, -5.38110077e-01, -5.76538891e-02, -6.34793192e-02,&
   2.81697917e+00, -9.62243557e-01,  4.13706809e-01,  6.42557979e-01,&
  -1.19106667e-02,  4.37766552e+00,  3.66113853e+00, -9.30189800e+00,&
  -7.17481896e-02,  1.38711214e+00/)

fortran_layer_1_weights_14 =  (/-2.74566889e-01,  2.15879011e+00, -6.12388968e-01, -3.07781267e+00,&
  -8.60122323e-01,  7.05558062e+00, -2.98045897e+00, -1.58296391e-01,&
   4.98014927e+00, -1.79304615e-01,  8.97640884e-01, -2.06794930e+00,&
   3.65739775e+00,  1.82433164e+00,  3.87903512e-01, -8.91821861e-01,&
   1.15174592e-01, -1.25196171e+00/)

fortran_layer_1_weights_15 =  (/ 1.41659546e+00, -1.72927690e+00,  2.81760550e+00, -1.42751217e+00,&
   6.37387782e-02,  6.13438845e-01, -1.17364846e-01,  3.77197385e-01,&
   1.48530257e+00,  5.99254668e-01, -1.17759931e+00, -2.50979829e+00,&
  -4.43066865e-01,  4.92612779e-01, -2.09271646e+00, -8.97375941e-01,&
   4.06379193e-01,  7.31208846e-02/)

fortran_layer_1_weights_16 =  (/ 2.04333924e-02, -1.34868145e+00,  1.04253590e+00, -1.67166853e+00,&
   3.27490978e-02,  8.75596702e-01,  2.05925897e-01,  1.27750361e+00,&
  -3.81922454e-01, -2.61954069e-01, -3.02985811e+00,  3.97697538e-02,&
   9.76033916e-04,  1.51950017e-01,  4.84726101e-01,  6.53551161e-01,&
   1.69229805e-01, -1.66269064e-01/)

fortran_layer_1_weights_17 =  (/ 1.69093266e-01, -1.65326977e+01, -1.30507171e+00, -1.35988772e+00,&
   7.35937655e-02, -5.75577021e-01, -3.55847806e-01, -1.89497173e-01,&
  -1.35803342e+00, -1.85399562e-01,  1.64500341e-01, -2.51985836e+01,&
   5.16106226e-02, -3.16969097e-01, -6.79059653e-03, -6.33671880e-01,&
   1.71901143e+00, -7.72216497e-03/)

fortran_layer_1_weights_18 =  (/ 7.05891848e-01, -1.63456183e-02,  8.11074793e-01, -5.40957332e-01,&
   4.07193571e-01,  9.66271311e-02, -1.73524780e+01,  8.23796839e-02,&
   6.99490607e-01,  4.05778646e+00,  6.50042474e-01, -1.07944131e-01,&
  -1.51959807e-01, -1.89238235e-01, -2.29477715e+00, -2.88379997e-01,&
   2.91169405e-01,  4.06662315e-01/)


fortran_layer_2_weights_1 = (/ 1.30592501e+00,  1.47598171e+00, -3.31358790e-01,  8.69153321e-01,&
  -3.19137990e-01, -2.72189409e-01,  2.40568429e-01,  7.93546975e-01,&
   3.09965229e+00, -3.45664835e+00, -3.99726415e+00, -6.33860677e-02,&
  -1.11720467e+00, -3.59202051e+00, -2.32221913e+00, -3.31372410e-01,&
   2.94432688e+00,  3.11299413e-02/)
 fortran_layer_2_weights_2 = (/-2.12431884e+00,  2.46472216e+00,  5.74179232e-01, -3.24987739e-01,&
   2.72156477e-01,  1.92843640e+00, -7.34711409e-01,  3.90736794e+00,&
  -6.40834522e+00,  6.53240538e+00, -2.27603674e+00,  1.59303975e+00,&
  -1.42433023e+00,  1.85648906e+00,  1.03633799e-01, -2.35637379e+00,&
   4.17861283e-01, -1.37422875e-01/)
fortran_layer_2_weights_3 =  (/ 2.95046735e+00,  1.22236526e+00,  5.29458448e-02, -1.89455914e+00,&
   2.10590214e-01,  6.31824791e-01,  5.23728058e-02, -2.44492650e+00,&
  -7.48457670e-01,  2.10724056e-01, -2.43701696e+00, -4.62926716e-01,&
  -6.18585014e+00, -2.00663716e-01, -1.20283437e+00, -1.22187413e-01,&
  -1.92001212e+00,  2.03771442e-02/)
fortran_layer_2_weights_4 =  (/ 4.19659901e+00,  2.58558631e+00, -6.95970237e-01, -7.60176837e-01,&
   2.38698810e-01,  7.01164246e-01, -2.82272935e-01,  4.82221574e-01,&
  -5.27152240e-01, -1.93506289e+00,  1.37624586e+00,  9.24340934e-02,&
  -2.60666996e-01, -2.41373754e+00,  1.33381292e-01,  2.28452396e+00,&
   6.76607251e-01,  2.14272272e-02/)
 fortran_layer_2_weights_5 =  (/-2.01626956e-01, -1.01063704e+00, -1.28062057e+00,  6.38625383e-01,&
   7.66237676e-02, -5.24221025e-02,  1.15614953e-02, -3.85570556e-01,&
   1.88285768e+00,  1.73810756e+00,  2.66635156e+00,  6.42081499e-01,&
   1.66828203e+00, -1.21317263e+01,  1.28560364e+00, -1.27960980e+00,&
  -1.22746789e+00, -1.30033365e-03/)

fortran_layer_2_weights_6 =   (/-1.42244726e-01, -1.05482650e+00,  7.97685862e-01, -1.77958894e+00,&
   1.72554538e-01, -5.82997990e+00, -6.93360791e-02,  1.27782750e+00,&
  -2.41888046e+00, -2.09494993e-01, -4.18046999e+00, -2.65943855e-01,&
  -1.17700410e+00,  7.33191073e-01, -2.27751017e+00, -5.79062462e-01,&
  -1.29599535e+00, -5.49632357e-03/)

fortran_layer_2_weights_7 =   (/-1.98081553e+00, -2.89508653e+00,  2.24538231e+00, -9.25189137e-01,&
  -2.46023226e+00,  6.87337160e-01, -2.23380938e-01,  1.97823465e+00,&
  -2.32996583e+00,  1.07361698e+00,  3.23934667e-02, -9.81483340e-01,&
  -1.23028207e+00, -1.45872021e+00, -1.21105301e+00,  3.62974453e+00,&
  -1.09283268e+00, -1.34528503e-02/)

fortran_layer_2_weights_8 =   (/-1.25413883e+00, -4.86665189e-01, -3.54213178e-01, -4.78278518e-01,&
   1.33810028e-01, -3.03544253e-01,  7.57727563e-01,  1.40232956e+00,&
   2.00780535e+00, -1.00664794e+00, -3.81752640e-01,  2.79184413e+00,&
   9.82417524e-01,  7.40753353e-01,  4.35338616e-01, -4.17563692e-02,&
   2.00446174e-01,  2.79106951e+00/)

fortran_layer_2_weights_9 =   (/ 3.91232461e-01, -5.48517275e+00,  1.45302117e+00, -1.15352988e+00,&
   1.72810718e-01, -1.25665843e+00,  5.80932014e-02, -4.52567816e-01,&
   2.23096871e+00, -1.31390154e+00,  4.49654484e+00,  7.64697641e-02,&
  -4.49749887e-01,  1.83975148e+00,  8.00741315e-01, -4.75084871e-01,&
  -1.11977911e+00, -1.12355463e-02/)

fortran_layer_2_weights_10 =   (/ 6.17073596e-01,  1.21406659e-01, -5.11072302e+00,  1.11817777e-01,&
   2.20020533e+00,  6.38705313e-01,  6.12678707e-01, -1.26206994e+00,&
   1.66001582e+00, -2.04310060e+00, -8.47371221e-01, -2.94668913e-01,&
   4.25235629e-01,  7.53104627e-01, -5.38264334e-01,  4.01707023e-01,&
   6.97985649e-01,  1.24780826e-01/)

fortran_layer_2_weights_11 =   (/ 1.69318044e+00, -1.24569654e+00, -7.59533405e-01, -2.37948537e+00,&
   5.23016453e-01,  3.60373199e-01, -1.63251430e-01, -1.25980079e+00,&
  -1.29187003e-01, -7.79938638e-01,  2.92126679e+00,  1.76201522e+00,&
  -2.02418208e-01, -4.98111695e-02,  9.56856459e-02,  1.34844387e+00,&
   1.08485186e+00,  7.48882862e-03/)

fortran_layer_2_weights_12 =   (/ 2.19410348e+00,  1.40419495e+00, -1.48532605e+00, -1.50345528e+00,&
  -1.69975138e+00,  1.92154865e+01, -8.85158253e+00,  3.83291602e+00,&
  -2.19352674e+00, -2.87996626e+00, -1.74228024e+00, -2.98817635e+00,&
   4.60941505e+00, -2.63706923e-01,  1.67353407e-01, -1.86427522e+00,&
  -2.62095809e-01, -3.78264040e-01/)

fortran_layer_2_weights_13 =   (/-2.41904187e+00,  1.58109084e-01, -1.09512949e+00, -8.26246068e-02,&
  -1.45558175e-02,  9.48373452e-02,  1.42606929e-01, -4.35759127e-01,&
   1.96242595e+00, -3.28487825e+00, -2.57794738e+00, -7.92466116e+00,&
  -3.04183751e-01,  8.91273260e-01, -3.22471023e-01,  1.65975690e+00,&
  -7.43268877e-02,  4.53796349e-02/)

fortran_layer_2_weights_14 =   (/-3.30412745e-01,  1.45422256e+00,  8.90433311e-01, -3.91803837e+00,&
  -3.37743580e-01, -2.88022637e+00,  1.28978893e-01,  2.26193714e+00,&
   5.37994802e-01,  8.74523103e-01, -5.45032382e-01, -5.81728315e+00,&
  -3.75819504e-02, -7.77670622e-01, -4.03618187e-01, -1.73627543e+00,&
   9.61157918e-01, -2.78504156e-02/)

fortran_layer_2_weights_15 =   (/-1.25447571e+00,  2.31320596e+00, -6.94334626e-01, -7.97533989e-01,&
  -4.74970192e-02,  9.72928524e-01,  7.23107383e-02,  1.74989974e+00,&
   3.49741864e+00, -6.83462441e-01, -4.33552563e-01, -1.22973692e+00,&
   1.49658203e+00, -1.19584668e+00,  2.03252971e-01,  1.91154277e+00,&
   1.32992303e+00,  4.23937887e-02/)

fortran_layer_2_weights_16 =   (/ 4.70074296e-01, -2.42248583e+00, -9.37738538e-01, -1.26646340e+00,&
  -2.23971568e-02,  7.56557286e-01, -2.29375198e-01, -1.11792982e+00,&
  -4.54974365e+00,  1.86948204e+00, -5.52419090e+00, -6.34239912e-01,&
  -1.93787503e+00,  3.34289402e-01,  2.27998567e+00, -9.95129347e-01,&
   8.13919723e-01, -2.67628748e-02/)

fortran_layer_2_weights_17 =   (/-4.70795304e-01, -3.32526267e-01,  1.08259284e+00,  6.30175352e-01,&
  -7.20252544e-02, -9.16884363e-01,  6.43810081e+00,  1.31379116e+00,&
  -1.11166680e+00, -1.54130709e+00,  9.61635172e-01,  4.17142540e-01,&
  -1.25664949e+00,  1.60562265e+00,  1.01808870e+00,  1.18373585e+00,&
  -1.10051739e+00, -3.32322754e-02/)

fortran_layer_2_weights_18 =   (/-4.74294472e+00,  1.48363173e+00, -3.37651730e+00, -2.60259891e+00,&
   3.61480176e-01, -1.32892275e+00,  1.34439468e-01,  6.16554856e-01,&
  -3.83025408e-01,  1.67600846e+00,  2.47225785e+00,  3.14816147e-01,&
  -7.19404268e+00,  7.94503093e-01, -2.58247256e+00,  1.15252817e+00,&
  -1.53511581e+01,  3.56176905e-02/)


fortran_layer_3_weights_1 =  (/-6.63942194e+00,  7.33304739e-01,  1.25528514e-01,  1.24489464e-01,&
   3.30353308e+00,  9.43366647e-01, -2.00632095e+00,  2.12825257e-02,&
  -1.02613091e+00,  4.26944399e+00, -2.62558603e+00,  2.88900137e+00,&
  -2.34787536e+00, -8.15430820e-01,  2.84502972e-02,  4.17113113e+00,&
   1.10616408e-01,  5.88931680e-01/)
 fortran_layer_3_weights_2 =  (/ 2.26117587e+00,  1.48463547e+00,  6.65457323e-02,  1.07671089e-01,&
   2.16854215e+00,  5.54916954e+00, -1.44649476e-01, -2.87219249e-02,&
   1.31213892e+00,  1.67166173e+00, -1.46352470e+00, -6.83597088e+00,&
  -4.35150814e+00,  1.98502481e+00,  3.15676928e+00,  2.53998327e+00,&
   5.45388274e-02, -4.55226243e-01/)
fortran_layer_3_weights_3 =   (/ 1.05923998e+00,  9.05780888e+00, -3.65047038e-01,  1.95943564e-01,&
   1.85914397e+00,  7.29309559e+00, -1.77895331e+00, -5.30018616e+00,&
   3.55862069e+00,  3.07873797e+00,  6.53994441e-01, -5.45738649e+00,&
  -8.85093391e-01, -7.67338419e+00,  5.76341772e+00, -8.28594112e+00,&
   4.55068015e-02,  1.13456142e+00/)
fortran_layer_3_weights_4 =   (/ 3.67259160e-02, -5.74373603e-01,  1.34582380e-02,  2.97841206e-02,&
   4.56319618e+00,  5.56506777e+00,  2.69973844e-01,  6.07207239e-01,&
   1.87520373e+00,  1.32527435e+00,  1.26298678e+00,  1.00801337e+00,&
   1.57446432e+00, -3.25887561e-01, -1.18522120e+01,  1.89144182e+00,&
   3.27181332e-02, -4.37568843e-01/)
fortran_layer_3_weights_5 =   (/ 1.05157292e+00, -1.58445370e+00,  1.11845756e+00,  2.29618605e-02,&
  -3.11918050e-01, -4.21040982e-01, -6.17975950e+00, -6.68434083e-01,&
  -3.85380197e+00,  1.92815110e-01, -1.02199888e+01,  6.13523066e-01,&
  -2.89353299e+00, -2.76651263e-01,  1.34377480e+00,  5.10537982e-01,&
  -2.83456713e-01, -2.39161864e-01/)
fortran_layer_3_weights_6 =   (/-6.10215485e-01,  6.54169655e+00, -3.30161500e+00, -2.48389292e+00,&
   8.65866184e+00,  4.31141138e-01, -4.48977280e+00, -1.64921701e+00,&
  -3.15181881e-01,  4.18653011e-01, -5.38429439e-01, -2.62286758e+00,&
  -3.49478197e+00, -5.54146767e+00, -5.39893627e-01, -5.77867842e+00,&
  -3.01754236e+00, -4.29712892e-01/)
fortran_layer_3_weights_7 =   (/ 7.06701696e-01, -2.48403621e+00,  1.18673414e-01,  1.67506874e-01,&
  -9.14007425e-01, -1.66447830e+00,  3.23032945e-01, -8.47046196e-01,&
  -1.68183357e-01, -1.75116122e+00,  1.78521156e-01,  6.22704208e-01,&
   1.54216850e+00, -1.49106048e-02, -3.74853611e-01, -3.95990908e-01,&
   1.75595856e+00,  4.45539594e-01/)
fortran_layer_3_weights_8 =   (/-1.38656247e+00,  1.36060643e+00, -1.18421741e-01,  5.20216823e-02,&
   3.56193995e+00, -3.47687006e+00,  8.20469260e-01, -3.74594480e-01,&
  -1.81478813e-01,  3.49735069e+00,  1.37253380e+00,  1.77501857e-01,&
   1.33559108e+00, -2.83075047e+00, -4.15907614e-02,  4.23583746e+00,&
   1.34419844e-01,  1.29811370e+00/)
fortran_layer_3_weights_9 =   (/-1.11664844e+00, -1.48915672e+00,  9.31512639e-02, -3.49649787e-02,&
  -2.15913272e+00, -2.72983074e+00, -2.32362613e-01,  8.44480377e-03,&
  -1.09798878e-01,  1.29670537e+00,  5.50799668e-02, -2.17648816e+00,&
   9.25327763e-02, -8.87180805e-01, -6.57713771e-01, -1.64299989e+00,&
  -7.12745860e-02, -1.48970768e-01/)
fortran_layer_3_weights_10 =   (/ 6.11062586e-01,  3.60865235e+00, -1.26592353e-01,  5.30303121e-01,&
   3.74118519e+00, -4.18470907e+00, -3.20944238e+00,  1.69375372e+00,&
  -8.90478373e-01, -2.59551108e-01, -1.10832736e-01,  4.19546223e+00,&
  -8.43625736e+00,  1.54428303e+00, -5.46148896e-01,  2.16895625e-01,&
   1.35165989e-01, -2.39206925e-01/)
fortran_layer_3_weights_11 =   (/-1.73083186e+00,  8.46780598e-01, -8.70878696e-02, -1.39855035e-02,&
  -1.58862567e+00,  4.88433838e+00,  8.61020908e-02,  4.23753309e+00,&
   2.21920419e+00,  6.03152335e-01, -2.77631664e+00,  1.49567807e+00,&
  -1.53717518e+00,  5.72180033e-01,  2.25158429e+00, -1.72311521e+00,&
  -7.83875398e-03, -4.16123581e+00/)
fortran_layer_3_weights_12 =   (/-3.18382531e-01,  4.30147505e+00, -9.32385921e-02, -8.24894235e-02,&
  -1.63293445e+00,  6.65314865e+00,  5.99638838e-03,  1.64548600e+00,&
  -1.49519220e-01, -1.66004944e+00,  5.09180725e-01,  1.38156915e+00,&
  -8.03636611e-01,  3.66257215e+00,  2.42735767e+00,  5.15637350e+00,&
   2.81730741e-02,  3.25579286e+00/)
 fortran_layer_3_weights_13 =  (/ 1.46006715e+00,  1.56099916e+00,  7.20702112e-02,  1.20685682e-01,&
   5.58385038e+00, -5.33510923e-01, -3.89547491e+00, -6.25639677e+00,&
  -1.05872643e+00,  1.58600962e+00,  6.66526318e-01,  4.16697931e+00,&
  -4.74195004e+00, -4.04303455e+00,  3.41965580e+00,  4.11842555e-01,&
   4.90763709e-02,  2.94769120e+00/)
fortran_layer_3_weights_14 =   (/ 1.56121111e+00, -2.98878074e-01,  5.49913831e-02,  9.20808017e-02,&
   1.28532648e+00,  3.73581111e-01, -2.88874078e+00, -3.49150211e-01,&
  -1.26424909e+00,  3.47274709e+00,  1.02377677e+00, -2.02213120e+00,&
  -1.04620895e+01, -1.33441365e+00,  6.84648752e-02,  1.72656298e+00,&
   8.02596211e-02,  6.98662698e-02/)
fortran_layer_3_weights_15 =   (/-2.75361943e+00,  3.02151895e+00, -1.34946465e-01,  3.56004648e-02,&
   2.71339893e+00,  3.44697618e+00,  6.77372038e-01,  1.85717857e+00,&
   1.56211984e+00,  1.09128618e+00, -4.10198069e+00,  2.55503964e+00,&
  -4.51314306e+00,  9.08840299e-01,  1.31081593e+00,  6.64754331e-01,&
   4.88104597e-02, -5.28818846e+00/)
fortran_layer_3_weights_16 =   (/-2.00608993e+00,  3.79317975e+00, -1.81241453e-01, -7.03123286e-02,&
   1.79158032e+00, -9.00560200e-01, -1.00662255e+00, -2.90283918e+00,&
  -7.63151050e-01,  5.01257718e-01, -2.59695005e+00, -2.11389542e+00,&
  -1.46777618e+00,  7.64427602e-01,  1.44008553e+00, -5.32095373e-01,&
   6.99205324e-02, -1.64073431e+00/)
fortran_layer_3_weights_17 =   (/-1.76353788e+00,  3.29935098e+00,  2.04733834e-02,  1.21257966e-02,&
   2.53124523e+00, -2.66152477e+00, -2.44901586e+00,  4.47583914e-01,&
   1.37222826e+00, -1.87870336e+00, -2.33387375e+00,  1.27764988e+00,&
  -8.15726948e+00, -4.75433159e+00,  4.13987970e+00, -5.69294071e+00,&
   1.81050859e-02, -2.95231795e+00/)
fortran_layer_3_weights_18 =   (/ 4.69595730e-01,  1.97336578e+00,  7.49560595e-02,  4.71996975e+00,&
   2.33781314e+00,  6.35790539e+00, -5.14740884e-01, -1.25129735e+00,&
  -5.93036950e-01,  8.57026935e-01,  8.04756880e-01,  1.52325881e+00,&
   2.98016477e+00,  9.91190910e-01, -1.90454260e-01,  1.67963341e-01,&
  -5.61687291e-01,  1.55186161e-01/)

fortran_layer_4_weights_1 =  (/ 6.49700820e-01, -8.70790798e-03, -5.88968039e+00,  1.10535514e+00,&
  -5.30770159e+00, -1.05521071e+00,  8.66955146e-02, -7.23574683e-03,&
  -5.61483097e+00, -7.40693569e-01,  1.44318426e+00,  4.38005686e-01,&
   9.14389119e-02, -2.85777271e-01, -3.63322639e+00,  1.83682775e+00,&
  -6.74221039e-01,  1.64751727e-02/)
fortran_layer_4_weights_2 =   (/-1.70451856e+00, -2.80007138e-04, -1.20531106e+00, -2.89108181e+00,&
  -4.40315628e+00, -7.28301883e-01, -1.66397005e-01, -3.90983559e-03,&
  -4.41623658e-01, -4.26223707e+00,  4.30126816e-01 -4.04488206e-01,&
  -6.99076414e+00, -7.33573973e-01, -1.23845184e+00,,  9.25524294e-01,&
   4.15740848e-01,  7.96453282e-03/)
fortran_layer_4_weights_3 =   (/ 4.11823243e-01, -2.23796278e-01 , 9.59954038e-03 , 1.68050313e+00,&
  -6.07178390e-01,  1.05052799e-01,  1.87299922e-01,  1.74852240e+00,&
  -7.01970086e-02,  1.57669365e+00, -2.87428945e-01,  4.68296349e-01,&
  -7.97358155e-01,  5.92943728e-01,  9.38803852e-02, -6.33849263e-01,&
  -6.76008165e-01, -6.86666742e-02/)
fortran_layer_4_weights_4 =   (/ 6.48336783e-02, -6.38428405e-02,  1.02363634e+00, -3.75016046e+00,&
   1.00077488e-01,  1.08632766e-01,  6.22755885e-01, -3.10709719e-02,&
   2.43750215e-01,  1.01306534e+00,  4.48599830e-02, -4.89065021e-01,&
   9.12802756e-01, -9.45461392e-02,  4.17323876e-03, -6.55256361e-02,&
  -1.80867016e-01,  1.19391966e+00/)
fortran_layer_4_weights_5 =   (/-1.58447242e+00, -2.41682283e-03, -3.01870443e-02,  2.09864482e-01,&
  -6.68228674e+00,  4.10516500e-01, -6.63484856e-02,  6.32916298e-03,&
  -6.93038404e-01, -6.35062456e+00, -2.23589361e-01, -3.45050544e-01,&
  -2.45232248e+00, -4.30931509e-01, -1.22832334e+00, -1.06211698e+00,&
  -2.08012700e+00, -1.25264246e-02/)
fortran_layer_4_weights_6 =   (/-1.50126839e+00, -4.74554347e-03, -1.06046736e+00,  3.83223027e-01,&
  -7.37530851e+00,  5.81432506e-02,  4.97477740e-01,  1.19050136e-02,&
  -7.11428523e-01, -5.25318766e+00, -1.22413866e-01,  2.15115353e-01,&
  -4.20778084e+00, -1.28544056e+00, -1.20804608e-01, -4.42484230e-01,&
  -1.91305733e+00, -1.00905485e-02/)
fortran_layer_4_weights_7 =   (/-2.67654687e-01, -3.16561796e-02,  3.08345437e+00, -4.75331604e-01,&
  -1.98860323e+00,  7.32049704e-01,  1.06381359e+01, -3.72387081e-01,&
   3.78334951e+00, -3.96894240e+00, -2.06567144e+00,  1.13415086e+00,&
   2.72755527e+00,  6.00846648e-01, -3.71142244e+00,  1.15291274e+00,&
   1.03505790e+00, -8.39169249e-02/)
fortran_layer_4_weights_8 =   (/-2.95792770e+00, -3.17705423e-03, -4.54161119e+00, -1.01191914e+00,&
  -5.89864731e+00, -5.43811560e-01,  3.60009372e-01,  6.52216449e-02,&
  -4.31760216e+00, -2.78419352e+00,  9.20268774e-01,  4.96481389e-01,&
  -1.36230793e+01, -1.58366644e+00,  6.86663270e-01,  5.50115049e-01,&
  -1.73276556e+00, -3.39640170e-01/)
fortran_layer_4_weights_9 =   (/ 2.54538536e+00,  1.60158053e-03, -7.57581741e-02,  5.79549909e-01,&
  -3.03632617e+00,  8.20594281e-02, -5.93241167e+00, -1.26138432e-02,&
  -4.59739834e-01, -3.83757448e+00,  2.03677788e-01,  1.01102436e+00,&
  -6.66442966e+00, -3.33981007e-01, -4.87402409e-01, -2.54054523e+00,&
  -6.12471163e-01, -1.12731345e-02/)
fortran_layer_4_weights_10 =   (/-1.63135040e+00, -1.44468388e-02, -5.98800182e-01, -2.98551470e-01,&
  -5.06752193e-01, -1.52671840e-02, -1.68711357e-02, -2.14368664e-02,&
  -4.49672163e-01, -2.99722695e+00, -6.44224742e-03, -1.17580950e+00,&
  -1.06437140e+01, -8.14805865e-01, -8.68690968e-01, -1.07521379e+00,&
  -5.22143900e-01, -1.97789166e-02/)
fortran_layer_4_weights_11 =   (/ 1.51277733e+00, -1.14492849e-02,  1.31475782e+00, -1.49149168e+00,&
   1.45247507e+00, -1.88880479e+00, -7.54535317e-01, -5.95805831e-02,&
  -1.44556630e+00, -6.69738388e+00,  1.41245317e+00, -2.57446557e-01,&
   3.44023967e+00, -1.81739736e+00, -3.15467334e+00, -1.50607347e+00,&
   8.86457145e-01, -2.56164391e-02/)
fortran_layer_4_weights_12 =   (/ 4.59465712e-01, -6.57145493e-03,  1.48429608e+00, -3.65422583e+00,&
  -2.80709052e+00, -1.28825223e+00,  1.42265186e-02, -3.57611780e-03,&
   2.36633229e+00, -4.20165873e+00, -5.30085146e-01,  8.53169337e-02,&
  -7.70448971e+00, -2.78276515e+00, -1.71198368e+00,  9.17284310e-01,&
   4.27194357e-01, -1.32681532e-02/)
fortran_layer_4_weights_13 =   (/-1.02324271e+00, -8.28921050e-03,  6.36247098e-01, -3.71328264e-01,&
  -1.74058127e+00, -1.30723858e+00, -6.50409222e+00,  3.38849835e-02,&
   1.48817444e+00, -1.02266169e+00, -8.21236074e-01, -7.34029174e-01,&
  -1.30724108e+00, -1.56008005e+00, -9.37083364e-01,  6.09772168e-02,&
  -5.60531557e-01,  2.64457371e-02/)
fortran_layer_4_weights_14 =   (/-2.93587148e-01,  4.42331098e-03, -1.06599450e+00, -6.94233954e-01,&
   3.12049627e+00, -6.99558973e-01, -1.12307537e+00,  4.04101349e-02,&
  -6.07978201e+00, -7.65716934e+00,  2.95640755e+00, -1.50777304e+00,&
   3.98712540e+00,  7.48637855e-01, -7.72973383e-03, -9.40108299e-01,&
   9.39585030e-01, -9.42101888e-03/)
fortran_layer_4_weights_15 =   (/-3.41615051e-01, -4.15421743e-03,  5.43935187e-02, -8.12750459e-02,&
  -1.61325622e+00,  2.48778880e-01, -3.92150819e-01, -8.20512790e-03,&
  -2.80462414e-01, -7.84526968e+00, -7.19397003e-03, -6.68618381e-01,&
  -4.17589712e+00, -2.05395222e+00, -2.23506987e-01, -9.84187663e-01,&
  -1.77209735e+00, -4.47963784e-03/)
fortran_layer_4_weights_16 =   (/-9.19237509e-02, -6.07661065e-03, -9.54303980e-01, -1.00338554e+00,&
  -5.43620014e+00, -2.99941778e-01, -1.16156880e-02,  8.16227309e-03,&
  -1.60240805e+00, -4.52815533e+00,  7.16751695e-01, -4.81360704e-01,&
   8.45661938e-01,  7.10874915e-01, -2.56267023e+00, -3.44994664e+00,&
  -1.97024250e+00,  1.60969310e-02/)
fortran_layer_4_weights_17 =   (/-2.24476910e+00,  6.23894095e-01, -4.78581280e-01, -4.03955603e+00,&
   2.74523377e-01,  1.22173510e-01, -3.60375595e+00,  8.34494829e-02,&
  -2.12358698e-01, -1.11298263e+00,  5.33674240e-01, -1.38107133e+00,&
   5.70571959e-01, -3.14544469e-01, -1.17671990e+00, -1.20498037e+00,&
  -4.44361836e-01, -8.25344846e-02/)
fortran_layer_4_weights_18 =   (/-1.84708869e+00, -7.52501981e-03,  6.98666498e-02, -1.62144625e+00,&
  -5.92122889e+00,  9.58127916e-01, -1.80892438e-01, -4.20097113e-02,&
   1.24003477e-01, -1.19182169e+00, -5.04352808e-01,  1.04519546e+00,&
  -7.20623636e+00, -1.73160160e+00,  1.20965016e+00, -1.23712552e+00,&
  -7.60002434e-01,  1.17198527e-02/)

fortran_layer_5_weights_1 =  (/ 2.37972736e-02, -1.99801698e-01,  1.43280172e+00,  9.82619166e-01,&
   3.94324970e+00, -7.97077179e-01,  4.52696085e+00, -1.05161369e-01,&
  -8.62992182e-03, -1.01211596e+01,  1.35276568e+00,  7.85345852e-01,&
   2.36906528e+00,  6.90063620e+00,  5.19914627e-01,  3.77209401e+00,&
   2.41044983e-01,  3.77187729e-01/)
fortran_layer_5_weights_2 =  (/-2.12467778e-02, -4.60516262e+00, -4.77865450e-02, -8.65165353e-01,&
  -2.33513176e-01,  3.07818681e-01, -2.38286138e+00, -3.66248861e-02,&
   2.37797782e-01,  1.99000835e-02, -8.40656221e-01,  1.02088653e-01,&
   1.74171701e-01,  5.41354775e-01,  4.58633810e-01,  2.86287338e-01,&
  -1.55293301e-01, -2.36356211e+00/)
fortran_layer_5_weights_3 =  (/ 6.49293419e-03, -4.97221500e-01,  6.81223795e-02, -4.21813130e-01,&
  -1.04882729e+00, -3.32559556e-01, -2.66579658e-01, -2.52432306e-03,&
   1.85458735e-03, -8.99258852e-02, -1.95751691e+00, -1.05700767e+00,&
  -7.56120980e-02,  5.65809250e-01, -1.48192987e-01,  3.84513766e-01,&
  -2.83238113e-01, -2.11734399e-02/)
fortran_layer_5_weights_4 =  (/ 3.07089160e-03, -1.79508996e+00,  4.85700727e-01,  1.32932886e-01,&
   1.58072364e+00,  1.11105695e-01,  1.77798665e+00, -5.59115171e-01,&
  -1.21844802e-02,  1.98898744e-02,  9.95829761e-01,  2.19249532e-01,&
   1.07797503e+00,  1.51749289e+00,  7.66277611e-02, -4.88032311e-01,&
  -1.58136606e+00,  9.75695848e-02/)
fortran_layer_5_weights_5 =  (/ 3.28927231e-03, -1.07331586e+00,  4.14075315e-01, -3.12293696e+00,&
   1.20914960e+00,  1.23453677e+00,  2.10990444e-01, -4.18576878e-03,&
   1.50895608e-03, -3.00410271e-01, -1.23479760e+00, -1.27644211e-01,&
   1.49530247e-01, -1.24015190e-01, -7.34671175e-01, -7.55751073e-01,&
  -6.47539735e-01, -1.43105060e-01/)
fortran_layer_5_weights_6 =  (/-2.93900864e-03, -1.11892855e+00, -4.74771529e-01, -1.24747074e+00,&
   2.51257330e-01, -1.27698556e-01, -1.72091216e-01, -7.50790723e-03,&
   1.36206357e-03,  6.87254709e-04, -3.89371425e-01, -3.29365671e-01,&
  -2.01502061e+00, -2.99498558e+00, -1.59152257e+00, -1.93715656e+00,&
  -3.78131461e+00,  1.67133182e-01/)
fortran_layer_5_weights_7 =  (/-2.99987882e-01, -2.20205277e-01,  2.49879971e-01, -3.95958990e-01,&
   7.17391968e-01,  1.60764188e-01,  8.59328926e-01, -1.57539055e-01,&
  -1.56212952e-02, -1.89260282e-02,  5.76365709e-01,  5.15776336e-01,&
   2.51363426e-01,  9.85241115e-01, -4.60003287e-01, -4.25095290e-01,&
  -1.00620365e+00, -5.11880405e-02/)
fortran_layer_5_weights_8 =  (/-5.24351485e-02, -5.57118893e-01, -2.77013510e-01, -8.33869338e-01,&
  -8.37199807e-01, -3.22270766e-03, -1.44114172e+00,  2.63581187e-01,&
   1.11479801e-03, -1.51150767e-02, -1.97675717e+00,  5.11272065e-02,&
  -5.60571015e-01,  2.89944410e-01, -6.41227588e-02,  1.33184865e-01,&
  -2.79813910e+00, -1.22267656e-01/)
fortran_layer_5_weights_9 =  (/-4.49595693e-03, -1.67092478e+00, -2.56282855e-02, -6.45667464e-02,&
   1.77550614e-01, -1.90897369e+00,  6.79258108e-02, -3.98039399e-03,&
   1.79039571e-03, -1.50342262e+00, -6.81584060e-01,  4.62208390e-01,&
  -2.18182951e-01, -2.07778141e-01,  9.14733633e-02, -1.75947145e-01,&
  -1.10830190e-02, -9.97744948e-02/)
fortran_layer_5_weights_10 =  (/ 1.83527991e-02, -3.14835319e-03,  7.55121768e-01,  3.14394593e-01,&
   1.58761430e+00, -4.64779496e-01,  1.87600315e+00, -2.10716799e-02,&
   1.43232364e-02, -4.58039701e-01,  8.80858719e-01,  2.07090691e-01,&
   6.58300340e-01,  1.08691342e-01,  8.77143681e-01, -1.07938945e-01,&
  -2.73552036e+00,  1.76792622e-01/)
fortran_layer_5_weights_11 =  (/-2.91566132e-03, -1.44963503e+00, -1.03489184e+00, -1.65468955e+00,&
  -2.98032069e+00, -1.32863760e+00, -2.36282015e+00, -5.28055243e-03,&
  -1.18768941e-04, -1.53475825e-03, -1.24732733e+00,  5.50742187e-02,&
  -1.43378103e+00, -1.77654612e+00, -3.86840761e-01, -8.42193782e-01,&
  -8.51486111e+00, -1.98461991e-02/)
fortran_layer_5_weights_12 =  (/ 1.32382084e-02, -1.65364623e-01,  1.25842977e+00,  8.51802170e-01,&
   5.23408031e+00,  8.23139865e-03,  3.17657971e+00,  4.84514862e-01,&
  -4.19841558e-02, -3.80347514e+00,  4.29417372e+00,  6.21871948e+00,&
   1.42527974e+00,  1.23219366e+01, -2.09567952e+00, -4.57655382e+00,&
  -1.20483375e+00,  3.28696132e-01/)
fortran_layer_5_weights_13 =  (/ 5.23008266e-03, -2.61910468e-01, -1.30166128e-01, -2.64305741e-01,&
  -8.23383331e-01, -1.21222861e-01,  4.26170200e-01, -4.30660788e-03,&
   2.00817268e-03, -2.06658930e-01,  5.55832982e-01, -1.77434281e-01,&
  -1.49120659e-01,  6.99165910e-02, -1.27377391e+00,  3.94172706e-02,&
  -1.07978344e+00, -3.40795405e-02/)
fortran_layer_5_weights_14 =  (/-3.42188077e-03, -3.26995216e-02,  1.72624993e+00,  2.28802872e+00,&
   6.77209234e+00, -1.76248825e+00,  3.72768760e+00,  3.48324478e-02,&
  -8.61934479e-03, -1.56322575e+00,  1.57911861e+00,  2.63151979e+00,&
   2.57381701e+00,  5.60283232e+00, -1.01283967e+00, -1.88206863e+00,&
  -1.98108029e+00,  7.51946941e-02/)
fortran_layer_5_weights_15 =  (/-1.28623098e-01,  1.09364223e+00,  1.47864294e+00,  3.25091052e+00,&
   6.80537748e+00,  5.92878294e+00,  5.14521360e+00, -1.10374421e-01,&
  -5.13474792e-02, -5.55820084e+00,  1.04179268e+01,  4.22736073e+00,&
   1.49592364e+00,  1.08185091e+01,  7.72385502e+00,  1.51185751e-01,&
  -1.05607450e+00,  3.19469213e-01/)
fortran_layer_5_weights_16 =  (/-5.14903963e-02,  4.01795171e-02,  1.45546508e+00,  2.23772556e-01,&
   3.74879193e+00,  5.34630343e-02,  3.38128304e+00,  2.99314465e-02,&
   4.34107631e-02, -1.84723353e+00,  1.23137534e+00,  1.60010958e+00,&
  -3.13023150e-01,  3.33868217e+00,  2.22029477e-01, -2.50044417e+00,&
  -8.11113358e-01, -1.65398687e-01/)
fortran_layer_5_weights_17 =  (/-9.74385664e-02,  1.26140273e+00,  3.00918365e+00,  3.81561422e+00,&
   6.44372845e+00,  6.12724113e+00,  3.34296966e+00, -1.09852619e-01,&
   1.66962221e-02, -5.91032600e+00,  7.52518702e+00,  3.21942639e+00,&
   3.00252724e+00,  8.61375618e+00,  9.79579389e-01, -1.36778665e+00,&
  -3.41462755e+00,  5.91132343e-01/)
fortran_layer_5_weights_18 =  (/ 2.29592159e-01, -1.58507183e-01, -1.52843654e+00, -2.99616128e-01,&
  -1.61818731e+00,  9.89730507e-02, -1.13389874e+00,  1.38773927e-02,&
  -2.27824389e-03,  2.05607116e-02, -3.99923235e-01, -2.88686484e-01,&
  -5.42864323e-01,  9.68092903e-02, -3.23854059e-01, -7.09461514e-03,&
   1.68027040e-02, -4.29611802e-01/)

fortran_layer_6_weights_1 = (/ 1.5539761e-01,  5.5138627e-04 ,-1.3327897e-03 , 1.1654968e-02/)
fortran_layer_6_weights_2 =  (/-5.4456247e-03, -1.9763182e-03 ,-1.2399078e-03 ,-7.7125031e-01/)
fortran_layer_6_weights_3 =  (/-2.5563419e-02, -4.3084782e-02 ,-1.5083233e-02 , 3.8885511e-03/)
fortran_layer_6_weights_4 =  (/ 6.7450046e-03,  6.1231554e-03 ,-7.8474268e-02 ,-9.2870504e-01/)
fortran_layer_6_weights_5 =  (/-1.6909236e-03,  3.0726136e-03 ,-1.5700482e-02 ,-2.1550044e-02/)
fortran_layer_6_weights_6 =  (/ 4.1545606e-03,  5.2946759e-03 ,-1.1459186e-03 ,-7.2926588e-02/)
fortran_layer_6_weights_7 =  (/-2.8435516e-03,  3.7259564e-03 , 5.1382515e-03 ,-1.5472987e-02/)
fortran_layer_6_weights_8 =  (/ 5.7169008e-03,  1.1912716e-03 , 1.3941200e-01 ,-4.1535106e-03/)
fortran_layer_6_weights_9 =  (/ 4.4717941e-02,  2.4000277e-01 , 1.7586062e-03 , 1.4089038e-02/)
fortran_layer_6_weights_10 =  (/ 2.2371989e-04,  8.8850444e-04, -3.4943977e-04, -1.1216157e-01/)
fortran_layer_6_weights_11 =  (/ 7.1749003e-03, -1.8695334e-02, -1.3444468e-02, -7.6281726e-02/)
fortran_layer_6_weights_12 =  (/-1.5623047e-02,  7.6579326e-03,  9.0637514e-03,  4.1700363e-02/)
fortran_layer_6_weights_13 =  (/ 1.6377322e-02,  6.5160450e-03,  3.3869796e-02, -1.5326968e-02/)
fortran_layer_6_weights_14 =  (/-2.5186618e-04,  1.9189232e-04, -7.1376964e-04, -3.9262645e-02/)
fortran_layer_6_weights_15 =  (/ 4.8720795e-03,  2.2036738e-03, -1.7590420e-03,  6.4124487e-02/)
fortran_layer_6_weights_16 =  (/-9.7265409e-04,  7.4641343e-05, -2.4556211e-05,  1.1209333e-01/)
fortran_layer_6_weights_17 =  (/ 1.2506788e-03, -3.2214244e-04,  1.6416931e-04,  1.9508073e-01/)
fortran_layer_6_weights_18 =  (/-1.1828750e-03, -8.9322129e-04,  1.0417167e-01, -2.7163239e-04/)

fortran_layer_1_consts = (/ 1.0299779,   1.219338,    2.5312243,  -0.5199032,   0.24759144, -1.556268,
 -0.0340974,  -1.1702311,   3.0962296,  -0.6005704,   0.7595756,  -1.3644739,
 -0.33829376, -0.08627481, -1.9548494,  -0.5573243,  -2.2089381,  -0.6418505 /)

fortran_layer_2_consts = (/  2.9945588,   -5.5384817,   -2.729982,     0.8952088,   -4.848977,
 -10.648302,     1.1620495,   -3.0357993,    5.843573,    -3.6227593,
  -0.6569177,    2.0438304,   -2.9394777,    0.49159124,   0.9109412,
  -2.0364,       0.1838718,    0.28416514/)

fortran_layer_3_consts = (/-2.8272347, -7.254996,  -9.961228,   4.287824,  -3.168005,  -6.5483465,
  1.261282,   2.453211,  -3.258404,  -3.392976,   6.4623218, -0.1368115,
  2.31076,    4.460343,  -8.217254,  -4.246685,   3.552877,  -4.3996377/)

fortran_layer_4_consts = (/-0.5624322, -6.316678,   0.7513293, -3.1802838,  4.8645964, -2.4310198,
 -8.952427,  -2.3617094,  1.8333364,  1.2753161,  9.772633,  -6.799838,
  8.272402,  -6.075181,  -1.993431,  -9.675675,  -7.939878,   1.9210284/)

fortran_layer_5_consts = (/ -2.784623,    -4.6447077,   -3.0135176,   -8.859911,   -11.415265,
  -5.613278,    -4.8800864,   -3.5210419,   -2.436618,     8.325497,
 -11.58081,    -26.877087,    -2.4608386,  -22.756514,    -6.8520923,
   1.7900747,    0.41323674,  -3.6204042 /)

fortran_layer_6_consts = (/0.15406066, 0.1535647,  0.20613079, 4.758452  /)

      x_t(1) = dt
      x_t(2) = nilyr
      x_t(3) = hi_min
      x_t(4) = rfrac
      x_t(5) = meltt
      x_t(6) = melts
      x_t(7) = frain
      x_t(8) = Tair
      x_t(9) = fsurfn
      x_t(10) = dhs
      x_t(11) = aicen
      x_t(12) = vicen
      x_t(13) = vsnon
      x_t(14) = Tsfcn
      x_t(15) = alvl
      x_t(16) = apnd
      x_t(17) = hpnd
      x_t(18) = ipnd

      !Print *, "This is before scaling and ffrac is: ", ffrac
      !Print *, "This is before scaling and x_t(18) is: ", x_t(18)
      !Print *, "This is before scaling and x_t(18) is: ", x_t
      !Print *, "this is Tsfcn ", Tsfcn, alvl, rfrac, meltt, melts, frain, Tair, fsurfn, aicen, vsnon
      !Print *, "Unscaled Data:", x_t
      !-----------------------------------------------------------------
      ! Scale Data
      !-----------------------------------------------------------------
      do i_loop = 1, 18
        tempmyreal = fortran_scaler_stds(i_loop)
        if (tempmyreal==0.0) THEN
          x_t(i_loop) = 0.0
        else 
          x_t(i_loop) = (x_t(i_loop)-fortran_scaler_means(i_loop))/(fortran_scaler_stds(i_loop))
        endif
      end do
      x_t(3)=1.301043e-16
      
      !Print *, "Scaled Data:", x_t
      !Print *, "fortran scaler means", fortran_scaler_means
      !Print *, "fortran scaler stddevs", fortran_scaler_stds
      !Print *, "This is after scaling and x_t(18) is: ", x_t
      !-----------------------------------------------------------------
      ! Tsfcn + alvl + rfrac + meltt + melts + frain + Tair + fsurfn 
      ! + aicen + vicen + vsnon + dhs + apnd_in + hpnd_in + ipnd_in 
      ! + ffrac_in 
      !-----------------------------------------------------------------
      !-----------------------------------------------------------------
      ! Initalise arrays
      !-----------------------------------------------------------------
      do i_loop = 1, 18
          layer_1(i_loop) = 0.0
      end do

      do i_loop = 1, 4 
          layer_2(i_loop) = 0.0 
      end do
      !-----------------------------------------------------------------
      ! Calculate layers of the neural network with the layer weights 
      ! and constants for each input to each respective layer 
      !-----------------------------------------------------------------
      do i_loop = 1, 18

            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_1(i_loop) * x_t(1)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_2(i_loop) * x_t(2)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_3(i_loop) * x_t(3)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_4(i_loop) * x_t(4)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_5(i_loop) * x_t(5)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_6(i_loop) * x_t(6)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_7(i_loop) * x_t(7)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_8(i_loop) * x_t(8)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_9(i_loop) * x_t(9)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_10(i_loop) * x_t(10)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_11(i_loop) * x_t(11)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_12(i_loop) * x_t(12)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_13(i_loop) * x_t(13)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_14(i_loop) * x_t(14)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_15(i_loop) * x_t(15)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_16(i_loop) * x_t(16)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_17(i_loop) * x_t(17)
            layer_1(i_loop) = layer_1(i_loop) + fortran_layer_1_weights_18(i_loop) * x_t(18)
      end do
      
      !Print *, "fortran for python layer_1 before constants are added. Alison layer_1(1): ", layer_1(1)
      !Print *, "fortran layer 1 weights", fortran_layer_1_weights
 
      do i_loop = 1, 18
         layer_1(i_loop) = fortran_layer_1_consts(i_loop) + layer_1(i_loop)
      end do

      !Print *, "fortran for python layer_1 after constants are added. Alison : ", layer_1

      do i_loop = 1, 18
         selu_x_dummy = layer_1(i_loop) 
         !Print *, "Selu for Python"
         !Print *, "Selu X In: ", selu_x_dummy
         CALL selu(selu_x_dummy)
         !Print *, "Selu X Out: ", selu_x_dummy
         layer_1(i_loop) = selu_x_dummy       
      end do

      !Print *, "This is layer1 as with python: ", layer_1


      !-----------------------------------------------------------------
      ! Calculate layers of the neural network with the layer weights
      ! and constants for each input to each respective layer
      !-----------------------------------------------------------------
      do i_loop = 1, 18

            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_1(i_loop) * layer_1(1)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_2(i_loop) * layer_1(2)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_3(i_loop) * layer_1(3)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_4(i_loop) * layer_1(4)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_5(i_loop) * layer_1(5)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_6(i_loop) * layer_1(6)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_7(i_loop) * layer_1(7)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_8(i_loop) * layer_1(8)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_9(i_loop) * layer_1(9)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_10(i_loop) * layer_1(10)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_11(i_loop) * layer_1(11)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_12(i_loop) * layer_1(12)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_13(i_loop) * layer_1(13)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_14(i_loop) * layer_1(14)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_15(i_loop) * layer_1(15)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_16(i_loop) * layer_1(16)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_17(i_loop) * layer_1(17)
            layer_2(i_loop) = layer_2(i_loop) + fortran_layer_2_weights_18(i_loop) * layer_1(18)
      end do

      !Print *, "fortran for python layer_2 before constants are added. Alison layer_2(1): ", layer_2(1)
      !Print *, "fortran layer 1 weights", fortran_layer_2_weights

      do i_loop = 1, 18
         layer_2(i_loop) = fortran_layer_2_consts(i_loop) + layer_2(i_loop)
      end do

      !Print *, "fortran for python layer_2 after constants are added. Alison : ", layer_2

      do i_loop = 1, 18
         selu_x_dummy = layer_2(i_loop)
         !Print *, "Selu for Python"
         !Print *, "Selu X In: ", selu_x_dummy
         CALL selu(selu_x_dummy)
         !Print *, "Selu X Out: ", selu_x_dummy
         layer_2(i_loop) = selu_x_dummy
      end do

      !Print *, "This is layer1 as with python: ", layer_2

      !-----------------------------------------------------------------
      ! Calculate layers of the neural network with the layer weights
      ! and constants for each input to each respective layer
      !-----------------------------------------------------------------
      do i_loop = 1, 18

            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_1(i_loop) * layer_2(1)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_2(i_loop) * layer_2(2)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_3(i_loop) * layer_2(3)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_4(i_loop) * layer_2(4)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_5(i_loop) * layer_2(5)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_6(i_loop) * layer_2(6)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_7(i_loop) * layer_2(7)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_8(i_loop) * layer_2(8)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_9(i_loop) * layer_2(9)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_10(i_loop) * layer_2(10)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_11(i_loop) * layer_2(11)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_12(i_loop) * layer_2(12)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_13(i_loop) * layer_2(13)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_14(i_loop) * layer_2(14)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_15(i_loop) * layer_2(15)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_16(i_loop) * layer_2(16)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_17(i_loop) * layer_2(17)
            layer_3(i_loop) = layer_3(i_loop) + fortran_layer_3_weights_18(i_loop) * layer_2(18)
      end do

      !Print *, "fortran for python layer_3 before constants are added. Alison layer_3(1): ", layer_3(1)
      !Print *, "fortran layer 1 weights", fortran_layer_3_weights

      do i_loop = 1, 18
         layer_3(i_loop) = fortran_layer_3_consts(i_loop) + layer_3(i_loop)
      end do

      !Print *, "fortran for python layer_3 after constants are added. Alison : ", layer_3

      do i_loop = 1, 18
         selu_x_dummy = layer_3(i_loop)
         !Print *, "Selu for Python"
         !Print *, "Selu X In: ", selu_x_dummy
         CALL selu(selu_x_dummy)
         !Print *, "Selu X Out: ", selu_x_dummy
         layer_3(i_loop) = selu_x_dummy
      end do

      !Print *, "This is layer1 as with python: ", layer_3

      !-----------------------------------------------------------------
      ! Calculate layers of the neural network with the layer weights
      ! and constants for each input to each respective layer
      !-----------------------------------------------------------------
      do i_loop = 1, 18

            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_1(i_loop) * layer_3(1)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_2(i_loop) * layer_3(2)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_3(i_loop) * layer_3(3)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_4(i_loop) * layer_3(4)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_5(i_loop) * layer_3(5)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_6(i_loop) * layer_3(6)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_7(i_loop) * layer_3(7)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_8(i_loop) * layer_3(8)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_9(i_loop) * layer_3(9)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_10(i_loop) * layer_3(10)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_11(i_loop) * layer_3(11)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_12(i_loop) * layer_3(12)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_13(i_loop) * layer_3(13)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_14(i_loop) * layer_3(14)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_15(i_loop) * layer_3(15)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_16(i_loop) * layer_3(16)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_17(i_loop) * layer_3(17)
            layer_4(i_loop) = layer_4(i_loop) + fortran_layer_4_weights_18(i_loop) * layer_3(18)
      end do

      !Print *, "fortran for python layer_4 before constants are added. Alison layer_4(1): ", layer_4(1)
      !Print *, "fortran layer 1 weights", fortran_layer_4_weights

      do i_loop = 1, 18
         layer_4(i_loop) = fortran_layer_4_consts(i_loop) + layer_4(i_loop)
      end do

      !Print *, "fortran for python layer_4 after constants are added. Alison : ", layer_4

      do i_loop = 1, 18
         selu_x_dummy = layer_4(i_loop)
         !Print *, "Selu for Python"
         !Print *, "Selu X In: ", selu_x_dummy
         CALL selu(selu_x_dummy)
         !Print *, "Selu X Out: ", selu_x_dummy
         layer_4(i_loop) = selu_x_dummy
      end do

      !Print *, "This is layer1 as with python: ", layer_4

      !-----------------------------------------------------------------
      ! Calculate layers of the neural network with the layer weights
      ! and constants for each input to each respective layer
      !-----------------------------------------------------------------
      do i_loop = 1, 18

            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_1(i_loop) * layer_4(1)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_2(i_loop) * layer_4(2)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_3(i_loop) * layer_4(3)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_4(i_loop) * layer_4(4)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_5(i_loop) * layer_4(5)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_6(i_loop) * layer_4(6)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_7(i_loop) * layer_4(7)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_8(i_loop) * layer_4(8)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_9(i_loop) * layer_4(9)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_10(i_loop) * layer_4(10)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_11(i_loop) * layer_4(11)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_12(i_loop) * layer_4(12)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_13(i_loop) * layer_4(13)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_14(i_loop) * layer_4(14)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_15(i_loop) * layer_4(15)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_16(i_loop) * layer_4(16)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_17(i_loop) * layer_4(17)
            layer_5(i_loop) = layer_5(i_loop) + fortran_layer_5_weights_18(i_loop) * layer_4(18)
      end do

      !Print *, "fortran for python layer_5 before constants are added. Alison layer_5(1): ", layer_5(1)
      !Print *, "fortran layer 1 weights", fortran_layer_5_weights

      do i_loop = 1, 18
         layer_5(i_loop) = fortran_layer_5_consts(i_loop) + layer_5(i_loop)
      end do

      !Print *, "fortran for python layer_5 after constants are added. Alison : ", layer_5

      do i_loop = 1, 18
         selu_x_dummy = layer_5(i_loop)
         !Print *, "Selu for Python"
         !Print *, "Selu X In: ", selu_x_dummy
         CALL selu(selu_x_dummy)
         !Print *, "Selu X Out: ", selu_x_dummy
         layer_5(i_loop) = selu_x_dummy
      end do

      !Print *, "This is layer1 as with python: ", layer_5

      !-----------------------------------------------------------------
      ! Calculate layers of the neural network with the layer weights
      ! and constants for each input to each respective layer
      !-----------------------------------------------------------------
      do i_loop = 1, 4

            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_1(i_loop) * layer_5(1)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_2(i_loop) * layer_5(2)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_3(i_loop) * layer_5(3)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_4(i_loop) * layer_5(4)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_5(i_loop) * layer_5(5)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_6(i_loop) * layer_5(6)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_7(i_loop) * layer_5(7)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_8(i_loop) * layer_5(8)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_9(i_loop) * layer_5(9)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_10(i_loop) * layer_5(10)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_11(i_loop) * layer_5(11)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_12(i_loop) * layer_5(12)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_13(i_loop) * layer_5(13)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_14(i_loop) * layer_5(14)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_15(i_loop) * layer_5(15)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_16(i_loop) * layer_5(16)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_17(i_loop) * layer_5(17)
            layer_6(i_loop) = layer_6(i_loop) + fortran_layer_6_weights_18(i_loop) * layer_5(18)
      end do

      !Print *, "fortran for python layer_6 before constants are added. Alison layer_6(1): ", layer_6(1)
      !Print *, "fortran layer 1 weights", fortran_layer_6_weights

      do i_loop = 1, 4
         layer_6(i_loop) = fortran_layer_6_consts(i_loop) + layer_6(i_loop)
      end do

      !Print *, "fortran for python layer_6 after constants are added. Alison : ", layer_6

      do i_loop = 1, 4
         selu_x_dummy = layer_6(i_loop)
         !Print *, "Selu for Python"
         !Print *, "Selu X In: ", selu_x_dummy
         CALL selu(selu_x_dummy)
         !Print *, "Selu X Out: ", selu_x_dummy
         layer_6(i_loop) = selu_x_dummy
      end do

      !Print *, "This is layer1 as with python: ", layer_6
      !-----------------------------------------------------------------
      ! Update pond variables and fraction of fsurfn.
      !-----------------------------------------------------------------
      apnd = layer_6(1)
      hpnd = layer_6(2)
      ipnd = layer_6(3)
      ffrac = layer_6(4)
!      Print *, "END OF SUBR. apnd: ", apnd 
!      Print *, "hpnd: ", hpnd
!      Print *, "ipnd: ", ipnd
!      Print *, "ffrac: ", ffrac
!      Print *, "fortran_scaler_stds: ", fortran_scaler_stds
!      Print *, "fortran_scaler_means: ", fortran_scaler_means
      !Print *, " layer_2: ", layer_2
      !Print *, "layer_1: ", layer_1
      Print *, "fortran_scaler_means(15)", fortran_scaler_means(15)
      Print *, "fortran_scaler_means(16)", fortran_scaler_means(16)
      Print *, "fortran_scaler_means(17)", fortran_scaler_means(17)
      Print *, "fortran_scaler_means(18)", fortran_scaler_means(18)
      Print *, "fortran_scaler_stds(15)", fortran_scaler_stds(15)
      Print *, "fortran_scaler_stds(16)", fortran_scaler_stds(16)
      Print *, "fortran_scaler_stds(17)", fortran_scaler_stds(17)
      Print *, "fortran_scaler_stds(18)", fortran_scaler_stds(18)
      

      Print *, "apnd before scaling and apnd scalers: ", apnd
      Print *, fortran_scaler_stds(15)
      Print *, fortran_scaler_means(15)
      Print *, "layer2", layer_2
      apnd=apnd*y_fortran_scaler_stds(1)+y_fortran_scaler_means(1)
      hpnd=hpnd*y_fortran_scaler_stds(2)+y_fortran_scaler_means(2)
      ipnd=ipnd*y_fortran_scaler_stds(3)+y_fortran_scaler_means(3)
      ffrac=ffrac*y_fortran_scaler_stds(4)+y_fortran_scaler_means(4)
!      apnd=apnd*(fortran_scaler_stds(15))+fortran_scaler_means(15) 
!      hpnd=hpnd*(fortran_scaler_stds(16))+fortran_scaler_means(16) 
!      ipnd=ipnd*(fortran_scaler_stds(17))+fortran_scaler_means(17) 
!      ffrac=ffrac*(fortran_scaler_stds(18))+fortran_scaler_means(18) 

      !Print *, "postscaling output: ", apnd, hpnd, ipnd, ffrac
      !if (apnd < 0.0) apnd = 0.0 
      !if (hpnd < 0.0) hpnd = 0.0
      !if (ipnd < 0.0) ipnd = 0.0 
      !if (ffrac < 0.0) ffrac = 0.0 

      !if (apnd > 1.0) apnd = 1.0 

      !if (ffrac > 1.0) ffrac = 1.0 

      Print *, "++++++++++++++++++++"
      Print *, "Inside compute_ponds_lvl SubRoutine (3)."
      Print *, "++++++++++++++++++++"
      Print *, "apnd (out):                   ", apnd
      Print *, "hpnd (out):                   ", hpnd
      Print *, "ipnd (out):                   ", ipnd
      Print *, "ffrac (out):                  ", ffrac
      Print *, "++++++++++++++++++++"
      Print *, "Inside compute_ponds_lvl SubRoutine (4)."
      Print *, "++++++++++++++++++++"

      end subroutine compute_ponds_lvl

!=======================================================================

!===============================================================
!
! selu activation function
! 
! This copies the keras selu activation function
! For more details see: https://keras.io/api/layers/activations/
!
!===============================================================

      subroutine selu(x)

      real (kind=dbl_kind), &
         intent(inout) :: &
         x

      ! local variables

      real (kind=dbl_kind) :: &
         selu_alpha, &    ! alpha 
         selu_scale, &    ! scale
         selu_x ! local selu_x function
      !Print *, "We are inside Selu, and x is: ", x
      selu_scale = 1.05070098
      selu_alpha = 1.67326324      
      !-----------------------------------------------------------------
      ! Compute selu activation function
      !-----------------------------------------------------------------

      if (x > 0.0) selu_x = selu_scale * x 
      if (x < 0.0) selu_x = selu_scale * selu_alpha * (exp(x) - 1.0)
      !Print *, "Inside selu and selu_x is: ", selu_x
      x = selu_x
      !Print *, "Inside selu and selu_x is: ", x

      end subroutine selu
  
!=======================================================================

      end module icepack_meltpond_lvl

!=======================================================================
